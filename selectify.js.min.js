/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scss/index.scss":
/*!*****************************!*\
  !*** ./src/scss/index.scss ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"selectify.js.min.css\";\n\n//# sourceURL=webpack://selectify.js/./src/scss/index.scss?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass SelectizeElement {\n  constructor (element, id, { search = false } = {}) {\n    this.search = search\n    this.element = element\n    this.id = id.replace(/[#.]/g, '')\n    this.multiple = element.hasAttribute('multiple')\n    this.classes = Array.from(this.element.classList)\n    this.addClass()\n    this.addCustomSelector()\n  }\n  addClass () {\n    this.element.classList.add('selectize-js-element')\n  }\n  addCustomSelector () {\n    this.element.insertAdjacentHTML('afterend', `\n      <div class=\"selectize-js-container\" id=\"${this.id}-container\">\n        ${this.search ? (`<input class=\"${[...this.classes, 'selectize-js-input'].join(' ')}\" placeholder=\"Zoeken\" id=\"${this.id}-handler\" value=\"${this.getCurrentLabel()}\" />`) : (`<button type=\"button\" class=\"${[...this.classes, 'selectize-js-btn'].join(' ')}\" id=\"${this.id}-handler\">${this.getCurrentLabel()}</button>`)}\n        <div class=\"selectize-js-options\" id=\"${this.id}-options\">${this.renderOptions()}</div>\n      </div>\n    `)\n    this.handler = this.element.parentElement.querySelector(`#${this.id}-handler`)\n    this.options = this.element.parentElement.querySelector(`#${this.id}-options`)\n    this.addListeners()\n  }\n  addListeners () {\n    this.addShowHideListener()\n    this.optionsListener()\n    this.filterListener()\n  }\n  addShowHideListener () {\n    this.element.addEventListener('focus', () => {\n      this.handler.focus()\n    })\n    this.handler.addEventListener('focus', () => {\n      this.showOptions()\n    })\n    document.addEventListener('click', e => {\n      const clickTarget = document.querySelector(`#${this.id}-container`)\n      if (!e.composedPath().includes(clickTarget)) {\n        this.hideOptions()\n      }\n    })\n  }\n  optionsListener () {\n    this.options.querySelectorAll('.selectize-js-option').forEach(option => {\n      option.addEventListener('click', () => {\n        this.selectValue(option.dataset.value)\n      })\n    })\n  }\n  filterListener () {\n    this.handler.addEventListener('input', () => {\n      const optionElements = document.getElementById(`${this.id}-options`)\n      const options = this.getOptions().map(option => {\n        if ('options' in option) {\n          option.options = option.options.filter(opt => {\n            return opt.label.toLowerCase().trim().includes(this.handler.value.toLowerCase().trim())\n          })\n        }\n        return option\n      }).filter(option => {\n        if ('options' in option) return option.options.length > 0\n        return option.label.toLowerCase().trim().includes(this.handler.value.toLowerCase().trim())\n      })\n      optionElements.innerHTML = this.getOptionsHTML(options)\n      this.optionsListener()\n    })\n  }\n  selectValue (value) {\n    if (this.multiple) {\n      // Toggle selected for this element\n      const valueOption = Array.from(this.element.options).find(option => {\n        return option.value === value\n      })\n      if (valueOption.hasAttribute('selected')) {\n        valueOption.removeAttribute('selected')\n      } else {\n        valueOption.setAttribute('selected', true)\n      }\n      const options = []\n      Array.from(this.element.selectedOptions).forEach(selectedOption => {\n        options.push(selectedOption.value)\n      })\n    } else {\n      this.element.value = value\n    }\n    this.setCurrentLabel()\n    this.hideOptions()\n  }\n  getCurrentLabel () {\n    const options = this.getOptions(this.element, true)\n    if (this.multiple && Array.from(this.element.selectedOptions).length) {\n      return Array.from(this.element.selectedOptions).map(selectedOption => {\n        return selectedOption.innerHTML\n      }).join(', ')\n    } else {\n      const option = options.find(option => {\n        return option.value === this.element.value\n      })\n      if (option) return option.label\n    }\n    return 'Kies een waarde'\n  }\n  setCurrentLabel () {\n    this.element.parentElement.querySelector(`#${this.id}-handler`).innerText = this.getCurrentLabel()\n  }\n  showOptions () {\n    this.handler.value = ''\n    this.options.classList.add('open')\n  }\n  hideOptions () {\n    this.handler.value = this.getCurrentLabel()\n    this.options.innerHTML = this.getOptionsHTML()\n    this.optionsListener()\n    this.options.classList.remove('open')\n  }\n  getOptionsHTML (options = this.getOptions()) {\n    let html = ''\n    for (const option of options) {\n      if ('options' in option) {\n        html += `\n          <div class=\"selectize-js-option-group\">\n            <span class=\"selectize-js-option-group-label\">${option.label}</span>\n            ${this.getOptionsHTML(option.options)}\n          </div>\n        `\n      } else {\n        html += `<div class=\"selectize-js-option\" data-value=\"${option.value}\" data-selected=\"${option.selected}\">${option.label}</div>`\n      }\n    }\n    return html\n  }\n  renderOptions () {\n    const options = this.getOptions(this.element)\n    return this.getOptionsHTML()\n  }\n  getOptions (element = this.element, flat = false) {\n    const options = []\n    const optionElements = element.querySelectorAll('optgroup, option')\n    optionElements.forEach(optionElement => {\n      if (optionElement.parentElement !== element && !flat) return\n      if (optionElement.tagName === 'OPTION') {\n        options.push({\n          value: optionElement.getAttribute('value'),\n          label: optionElement.innerHTML,\n          selected: this.multiple ? optionElement.hasAttribute('selected') : this.element.value === optionElement.getAttribute('value')\n        })\n      } else if (!flat && optionElement.tagName === 'OPTGROUP') {\n        // Opt group\n        options.push({\n          label: optionElement.getAttribute('label'),\n          options: this.getOptions(optionElement)\n        })\n      }\n    })\n    return options\n  }\n}\nclass Selectize {\n  constructor (selector, config = {}) {\n    this.config = config\n    this.selector = selector\n    this.counter = 1\n    this.elements = document.querySelectorAll(selector)\n    this.init()\n  }\n  init () {\n    this.elements.forEach(element => {\n      new SelectizeElement(element, `${this.selector}-${this.counter}`, this.config)\n      this.counter++\n    })\n  }\n}\n\nwindow.Selectize = Selectize\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Selectize);\n\n\n//# sourceURL=webpack://selectify.js/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/scss/index.scss");
/******/ 	
/******/ })()
;